name: Release Build

on:
  release:
    types: [created]

permissions:
  contents: write
  
env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: all-smi
            asset_name: all-smi-linux-x86_64
            cross: false

          # Linux x86_64 musl (static)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: all-smi
            asset_name: all-smi-linux-x86_64-musl
            cross: true

          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: all-smi
            asset_name: all-smi-linux-aarch64
            cross: true

          # Linux ARM64 musl (static)
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: all-smi
            asset_name: all-smi-linux-aarch64-musl
            cross: true

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: all-smi
            asset_name: all-smi-macos-x86_64
            cross: false

          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: all-smi
            asset_name: all-smi-macos-aarch64
            cross: false

          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: all-smi.exe
            asset_name: all-smi-windows-x86_64.exe
            cross: false

          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: all-smi.exe
            asset_name: all-smi-windows-aarch64.exe
            cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary (native)
        if: '!matrix.cross'
        run: |
          cargo build --release --target ${{ matrix.target }} --bin all-smi

      - name: Build binary (cross)
        if: matrix.cross
        run: |
          cross build --release --target ${{ matrix.target }} --bin all-smi

      - name: Package binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.asset_name }}.tar.gz all-smi
          echo "ASSET=target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV

      - name: Package binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.asset_name }}.zip all-smi.exe
          echo "ASSET=target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ matrix.asset_name }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
